load(import_data.R)
source(import_data.R)
source("import_data.R")
#Source the function, which is stored in my working directory
source("import_data.R")
joined_data<- import_data()
library(fs)
library(readr)
library(here)
library(purrr)
library(janitor)
library(dplyr)
library(stringr)
library(naniar)
library(plotly)
library(stringr)
library(forcats)
#Source the function, which is stored in my working directory
source("import_data.R")
joined_data<- import_data()
head(joined_data_)
#Source the function, which is stored in my working directory
source("import_data.R")
joined_data<- import_data()
head(joined_data)
dplyr::select_if(joined_data, contains("e_end"))
dplyr::select_if(joined_data, contains("eend"))
dplyr::select_if(joined_data, contains("end"))
dplyr::select_if(joined_data, contains("End"))
names(joined_data)<- janitor::make_clean_names(names(joined_data))
#Take a look
dplyr::select_if(joined_data, contains("interference"))
#Source the function, which is stored in my working directory
source("import_data.R")
joined_data<- import_data()
#Check out the first few rows of data
head(joined_data)
names(joined_data)<- janitor::make_clean_names(names(joined_data))
#Take a look
dplyr::select_if(joined_data, contains("interference"))
head(joined_data)
names(joined_data)<- janitor::make_clean_names(names(joined_data))
#Take a look
dplyr::select(joined_data, contains("interference"))
names(joined_data)<- janitor::make_clean_names(names(joined_data))
#Take a look
dplyr::select(joined_data, contains("interference"))
save(joined_data, "joined_data.Rda")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE, out.width = '100%')
library(fs)
library(readr)
library(here)
library(purrr)
library(janitor)
library(dplyr)
library(stringr)
library(naniar)
library(plotly)
library(stringr)
library(forcats)
#Source the function, which is stored in my working directory
source("import_data.R")
joined_data<- import_data()
#Check out the first few rows of data
head(joined_data)
names(joined_data)<- janitor::make_clean_names(names(joined_data))
#Take a look
dplyr::select(joined_data, contains("interference"))
#Fix the e issue
names(joined_data)<- stringr::str_replace_all(names(joined_data), "^e_", "")
names(joined_data)<- stringr::str_replace_all(names(joined_data), "_e_", "_")
#Fix the digit-word issue by finding all variables that have a 'q' followed by any digit. Replace them with q_digit.
names(joined_data)<- stringr::str_replace_all(names(joined_data), "q(?=\\d+)", "q_")
na_strings<- c(naniar::common_na_strings, "-2", "-5", "-4", "-99")
joined_data<- joined_data %>% naniar::replace_with_na_all(condition = ~.x %in% na_strings)
joined_data<- janitor::remove_empty(joined_data, which = c("rows", "cols"))
joined_data<- joined_data %>% dplyr::distinct(patient_id, .keep_all = TRUE)
numeric_vars<- stringr::str_subset(names(joined_data),
regex("pcs|pseq|dass|weight|height|tests|hours_worked|morphine|bpi_|hsu|allied_health"))
joined_data<- joined_data %>% mutate_at(vars(numeric_vars), as.numeric)
date_vars<- stringr::str_subset(names(joined_data), regex("date|dob"))
joined_data<- joined_data %>% mutate_at(vars(date_vars), lubridate::dmy)
joined_data<- joined_data %>% dplyr::mutate_if(~any(c(0, 1, 2, NA) %in% .x) && length(unique(as.numeric(.x))) <= 3, as.numeric)
joined_data$pain_source<- dplyr::recode(joined_data$pain_source,
`1` = "Injury at home",
`2` = "Injury at work/school",
`3` = "Injury in another setting",
`4` = "After surgery",
`5` = "Motor vehicle crash",
`6` = "Cancer",
`7` = "Medical condition other than cancer",
`8` = "No obvious cause",
`99` = "Other cause",
.default = NA_character_
)
joined_data$pain_duration<- dplyr::recode(joined_data$pain_duration,
`1` = "Less than 3 months",
`2` = "3-12 Months",
`3` = "12 months-2 years",
`4` = "2-5 years",
`5` = "More than 5 years",
.default = NA_character_
)
joined_data$country_of_birth<- dplyr::recode(joined_data$country_of_birth, `1` = "Australia",
`2` = "New Zealand",   `9` = "Other", .default = NA_character_)
joined_data$sex<- dplyr::recode(joined_data$sex, `1` = "Male", `2` = "Female", `3` = "Not stated/described", .default = NA_character_)
joined_data$state<- dplyr::recode(joined_data$state, `2` = "Victoria", .default = NA_character_)
joined_data$referral_source<- dplyr::recode(joined_data$referral_source,
`10` = "GP/Nurse",
`11` = "Specialist", `12` = "Pain management service",
`13` = "Public hospital", `14` = "Private hospital",
`15` = "Rehab provider/private insurer", `99` = "Other",
.default = NA_character_)
joined_data$episode_start_mode<- dplyr::recode(joined_data$episode_start_mode,
`1` = "Single or multidisciplinary assessment",
`2` = "Treatment start",
`3` = "Multidisciplinary assessment and/or treatment",
`4` = "Single discipline assessment and/or treatment",
`5` = "Education/orientation program",
.default = NA_character_)
joined_data$compensation_case_type<- dplyr::recode(joined_data$compensation_case_type,
`1` = "Workers compensation",
`2` = "Public liability compensation",
`3` = "Motor vehicle compensation",
`9` = "Other compensation",
.default = NA_character_)
joined_data$episode_end_mode<- dplyr::recode(joined_data$episode_end_mode,
`1` = "Complete - self management/referal to primary care",
`2` = "Referral to another pain service",
`3` = "Patient discontinued by choice",
`4` = "Died",
`5` = "Complete - Ongoing review",
`6` = "Referral did not proceed to episode start",
`7` = "Lost to contact",
.default = NA_character_
)
joined_data$ref_pain_description<- dplyr::recode(joined_data$ref_pain_description,
`1` = "Always present (same intensity)",
`2` = "Always present (intensity varies)",
`3` = "Often present",
`4` = "Occasionally present",
`5` = "Rarely present",
`6` = "No longer present",
.default = NA_character_
)
joined_data$end_pain_description<- dplyr::recode(joined_data$end_pain_description,
`1` = "Always present (same intensity)",
`2` = "Always present (intensity varies)",
`3` = "Often present",
`4` = "Occasionally present",
`5` = "Rarely present",
`6` = "No longer present",
.default = NA_character_
)
joined_data$ref_bpi_main_pain<- dplyr::recode(joined_data$ref_bpi_main_pain,
`51` = "Head",
`52` = "Face",
`53` = "Neck",
`54` = "Left shoulder",
`55` = "Right shoulder",
`56` = "Chest",
`57` = "Left upper arm",
`58` = "Right upper arm",
`59` = "Left elbow",
`60` = "Right elbow",
`61` = "Left forearm",
`62` = "Right forearm",
`63` = "Left wrist",
`64` = "Right wrist",
`65` = "Left hand",
`66` = "Right hand",
`67` = "Abdomen",
`68` = "Left hip",
`69` = "Right hip",
`70` = "Groin",
`71` = "Left thigh",
`72` = "Right thigh",
`73` = "Left knee",
`74` = "Right knee",
`75` = "Left calf",
`76` = "Right calf",
`77` = "Left ankle",
`78` = "Right ankle",
`79` = "Left foot",
`80` = "Right foot",
`81` = "Upper back",
`82` = "Mid back",
`83` = "Low back",
.default = NA_character_
)
joined_data$end_bpi_main_pain<- dplyr::recode(joined_data$end_bpi_main_pain,
`51` = "Head",
`52` = "Face",
`53` = "Neck",
`54` = "Left shoulder",
`55` = "Right shoulder",
`56` = "Chest",
`57` = "Left upper arm",
`58` = "Right upper arm",
`59` = "Left elbow",
`60` = "Right elbow",
`61` = "Left forearm",
`62` = "Right forearm",
`63` = "Left wrist",
`64` = "Right wrist",
`65` = "Left hand",
`66` = "Right hand",
`67` = "Abdomen",
`68` = "Left hip",
`69` = "Right hip",
`70` = "Groin",
`71` = "Left thigh",
`72` = "Right thigh",
`73` = "Left knee",
`74` = "Right knee",
`75` = "Left calf",
`76` = "Right calf",
`77` = "Left ankle",
`78` = "Right ankle",
`79` = "Left foot",
`80` = "Right foot",
`81` = "Upper back",
`82` = "Mid back",
`83` = "Low back",
.default = NA_character_
)
joined_data<- joined_data %>% dplyr::mutate(
end_bpi_main_pain = forcats::fct_collapse(joined_data$end_bpi_main_pain,
"Arm" = c("Left forearm", "Right forearm", "Left wrist", "Right wrist",
"Left elbow", "Right elbow", "Left upper arm",
"Right upper arm"),
"Shoulder" = c("Left shoulder", "Right shoulder"),
"Leg" = c("Left ankle", "Right ankle", "Left knee", "Right knee",
"Left thigh", "Right thigh", "Left calf", "Right calf"),
"Hip" = c("Left hip", "Right hip"),
"Head" = "Head",
"Face" = "Face",
"Neck" = "Neck",
"Back" = c("Low back", "Mid back", "Upper back"),
"Foot" = c("Left foot", "Right foot"),
"Hand" = c("Left hand", "Right hand")
),
ref_bpi_main_pain  = forcats::fct_collapse(joined_data$end_bpi_main_pain,
"Arm" = c("Left forearm", "Right forearm", "Left wrist", "Right wrist",
"Left elbow", "Right elbow", "Left upper arm",
"Right upper arm"),
"Shoulder" = c("Left shoulder", "Right shoulder"),
"Leg" = c("Left ankle", "Right ankle", "Left knee", "Right knee",
"Left thigh", "Right thigh", "Left calf", "Right calf"),
"Hip" = c("Left hip", "Right hip"),
"Head" = "Head",
"Face" = "Face",
"Neck" = "Neck",
"Back" = c("Low back", "Mid back", "Upper back"),
"Foot" = c("Left foot", "Right foot"),
"Hand" = c("Left hand", "Right hand")
))
#drop all variables that contain a digit (because I don't need item-level questionnaire data).
item_vars<- stringr::str_subset(names(joined_data), regex("q_\\d+"))
joined_data<- joined_data %>% select(!!-any_vars(item_vars))
#Drop variables that have only one value
joined_data<- joined_data %>% purrr::keep(~length(unique(.x)) >= 2)
#Drop variables with over 50% of responses missing
joined_data<- joined_data %>% discard(~mean(is.na(.x)) >= .5)
#Drop miscellaneous variables that I don't kneed
joined_data<- joined_data %>% dplyr::select(-state, -episode_id, -torres_strait_isl, -ref_comp_status, -end_height, -end_weight,-contains("interpreter"), -contains("hours_worked"), -contains("survey_category_id"),
-contains("survey_schedule_id"), -contains("key"),
-contains("retraining"), -contains("opioid_maint"),
-contains("ref_voluntary"), -contains("count_analg_ex_opi"))
joined_data<- purrr::modify_if(joined_data, is.character, forcats::fct_explicit_na)
joined_data<- joined_data %>% purrr::modify_if(is.factor, forcats::fct_infreq)
save(joined_data, "joined_data.Rda")
save(joined_data, file = "joined_data.Rda")
saveRDS(joined_data, "clean_data.Rds")
saveRDS(joined_data, "clean_data.rds")
clean_data<- saveRDS(joined_data, "clean_data.rds")
glimpse(clean_data)
clean_data<- saveRDS(joined_data, "clean_data.rds")
clean_data
clean_data <- readRDS("~/Documents/tim_website/tim_website/website_files/content/post/data_wrangle/clean_data.rds")
clean_data
