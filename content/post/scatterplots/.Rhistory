purrr::map(mtcars, mean)
purrr::map_dfr(mtcars, mean)
purrr::map_dfr(mtcars, ~mean(.x))
purrr::accumulate(mtcars, `*`)
skimr::skim(mtcars)
lm (mpg ~ ., data = mtcars)
lm (mpg ~ ., data = mtcars) %>% tidy()
library(magrittr)
lm (mpg ~ ., data = mtcars) %>% tidy()
library(tidyr)
lm (mpg ~ ., data = mtcars) %>% tidy()
scatter_by_var<- show_all_scatterplots(vars_of_interest)
show_all_scatterplots<- function(df) {
df<- dplyr::select_if(df, is.numeric)
#Create a two-column dataframe with all possible pairs of numeric variable names
numeric_pairs<- tibble::tibble(x_variable = names(df),
y_variable = x_variable) %>% expand.grid()
#Iterate over the two columns of numeric variable names we've created and use them
#to select variable from mtcars programatically
plot_list<- purrr::map2(numeric_pairs$x_variable, numeric_pairs$y_variable, ~ {
#Create linear models for each pair of variables — required for fitting a line
#to each plot
model<- lm(df[[.y]] ~ df[[.x]], data = df)
#Create the plotly base for the plot. Programmatic mapping in plotly requires us
#to specify variables using square bracket notation, rather than the
#usual x = ~x, y = ~y. I don't know why.
plotting_df<- tibble::tibble(x_plot_var = df[[.x]], y_plot_var = df[[.y]]) %>% dplyr::filter(complete.cases(.))
plot_ly(plotting_df, x = ~x_plot_var, y = ~y_plot_var) %>%
add_markers(x = ~jitter(x_plot_var), y = ~jitter(y_plot_var), opacity = 0.5, showlegend = FALSE) %>%
#Add the line of best fit to each plot
add_lines(y = ~fitted(model))  %>%
layout(title = paste0(.x, " vs ", .y,":", "
Correlation = ", round(cor(df[[.x]],
df[[.y]], use = "pairwise.complete.obs"), 2)),
xaxis = list(title = paste(.x)),
yaxis = list(title = paste(.y))) %>% config(displayModeBar = F)
})
plot_names<- numeric_pairs %>% tidyr::unite("plot_labels", x_variable:y_variable, sep = "AND", remove = TRUE) %>% dplyr::pull(plot_labels)
plot_list<- plot_list %>% purrr::set_names(plot_names)
}
scatter_by_var<- show_all_scatterplots(vars_of_interest)
vars_of_interest<-  dplyr::select(clean_data, patient_id, sex, ref_hsugp, ref_hsu_allied_health, ref_hsu_specialist, ref_hsu_hospital, ref_hsued, ref_unemployed_pain, ref_daily_morphine, ref_bpi_work, ref_hsu_diagnostic_tests, ref_opioid_freq, ref_full_time, ref_bpi_relations, ref_pcs_total, ref_pseq_total, ref_pcs_helplessness, ref_pcs_magnification, ref_pcs_rumination, ref_bpi_sleep, ref_bpi_average, ref_weight, ref_dass_depression,
ref_dass_anxiety, ref_dass_stress, pain_duration)
clean_data<- readRDS("clean_data.rds")
vars_of_interest<-  dplyr::select(clean_data, patient_id, sex, ref_hsugp, ref_hsu_allied_health, ref_hsu_specialist, ref_hsu_hospital, ref_hsued, ref_unemployed_pain, ref_daily_morphine, ref_bpi_work, ref_hsu_diagnostic_tests, ref_opioid_freq, ref_full_time, ref_bpi_relations, ref_pcs_total, ref_pseq_total, ref_pcs_helplessness, ref_pcs_magnification, ref_pcs_rumination, ref_bpi_sleep, ref_bpi_average, ref_weight, ref_dass_depression,
ref_dass_anxiety, ref_dass_stress, pain_duration)
find_correlations<- function(df) {
numeric_data<- dplyr::select_if(df, is.numeric)
numeric_var_names<- rlang::syms(names(numeric_data))
correlations<- corrr::correlate(numeric_data)
correlation_by_var_list<- purrr::map(numeric_var_names, ~{corrr::focus(correlations, !!.x) %>%
dplyr::filter(!!.x >= 0.3 | !!.x <= -0.3) %>% dplyr::arrange(desc(!!.x))})
corelation_by_var_list<- correlation_by_var_list %>% purrr::set_names(names(numeric_data))
}
show_all_scatterplots<- function(df) {
df<- dplyr::select_if(df, is.numeric)
#Create a two-column dataframe with all possible pairs of numeric variable names
numeric_pairs<- tibble::tibble(x_variable = names(df),
y_variable = x_variable) %>% expand.grid()
#Iterate over the two columns of numeric variable names we've created and use them
#to select variable from mtcars programatically
plot_list<- purrr::map2(numeric_pairs$x_variable, numeric_pairs$y_variable, ~ {
#Create linear models for each pair of variables — required for fitting a line
#to each plot
model<- lm(df[[.y]] ~ df[[.x]], data = df)
#Create the plotly base for the plot. Programmatic mapping in plotly requires us
#to specify variables using square bracket notation, rather than the
#usual x = ~x, y = ~y. I don't know why.
plotting_df<- tibble::tibble(x_plot_var = df[[.x]], y_plot_var = df[[.y]]) %>% dplyr::filter(complete.cases(.))
plot_ly(plotting_df, x = ~x_plot_var, y = ~y_plot_var) %>%
add_markers(x = ~jitter(x_plot_var), y = ~jitter(y_plot_var), opacity = 0.5, showlegend = FALSE) %>%
#Add the line of best fit to each plot
add_lines(y = ~fitted(model))  %>%
layout(title = paste0(.x, " vs ", .y,":", "
Correlation = ", round(cor(df[[.x]],
df[[.y]], use = "pairwise.complete.obs"), 2)),
xaxis = list(title = paste(.x)),
yaxis = list(title = paste(.y))) %>% config(displayModeBar = F)
})
plot_names<- numeric_pairs %>% tidyr::unite("plot_labels", x_variable:y_variable, sep = "AND", remove = TRUE) %>% dplyr::pull(plot_labels)
plot_list<- plot_list %>% purrr::set_names(plot_names)
}
scatter_by_var<- show_all_scatterplots(vars_of_interest)
library(fs)
library(readr)
library(here)
library(purrr)
library(janitor)
library(dplyr)
library(stringr)
library(naniar)
library(plotly)
library(stringr)
library(forcats)
library(correlationfunnel)
library(magrittr)
show_all_scatterplots<- function(df) {
df<- dplyr::select_if(df, is.numeric)
#Create a two-column dataframe with all possible pairs of numeric variable names
numeric_pairs<- tibble::tibble(x_variable = names(df),
y_variable = x_variable) %>% expand.grid()
#Iterate over the two columns of numeric variable names we've created and use them
#to select variable from mtcars programatically
plot_list<- purrr::map2(numeric_pairs$x_variable, numeric_pairs$y_variable, ~ {
#Create linear models for each pair of variables — required for fitting a line
#to each plot
model<- lm(df[[.y]] ~ df[[.x]], data = df)
#Create the plotly base for the plot. Programmatic mapping in plotly requires us
#to specify variables using square bracket notation, rather than the
#usual x = ~x, y = ~y. I don't know why.
plotting_df<- tibble::tibble(x_plot_var = df[[.x]], y_plot_var = df[[.y]]) %>% dplyr::filter(complete.cases(.))
plot_ly(plotting_df, x = ~x_plot_var, y = ~y_plot_var) %>%
add_markers(x = ~jitter(x_plot_var), y = ~jitter(y_plot_var), opacity = 0.5, showlegend = FALSE) %>%
#Add the line of best fit to each plot
add_lines(y = ~fitted(model))  %>%
layout(title = paste0(.x, " vs ", .y,":", "
Correlation = ", round(cor(df[[.x]],
df[[.y]], use = "pairwise.complete.obs"), 2)),
xaxis = list(title = paste(.x)),
yaxis = list(title = paste(.y))) %>% config(displayModeBar = F)
})
plot_names<- numeric_pairs %>% tidyr::unite("plot_labels", x_variable:y_variable, sep = "AND", remove = TRUE) %>% dplyr::pull(plot_labels)
plot_list<- plot_list %>% purrr::set_names(plot_names)
}
scatter_by_var<- show_all_scatterplots(vars_of_interest)
scatter_by_var[["ref_bpi_pain_severityANDref_pseq_total"]]
